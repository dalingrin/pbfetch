#!/bin/bash
######################################################
# Search algorithm heavily influenced by             #
# aurget: http://pbrisbin.com:8080/pages/aurget.html #
######################################################

NAME="pbfetch"
VERSION="v0.3"
DESCRIPTION="Simple script to fetch PKGBUILDS from AUR & ABS"
AUTHOR="-Erik Hardesty"
DATE="(12/13/09)"

#PKGBUILD EDITOR
EDITOR="vim"

#BUILD DIRECTORY
BUILDDIR=~/build

#LOCAL ABS DIRECTORY
ABS="/var/abs"

#AUR URL
AUR="http://aur.archlinux.org/packages"

#COLORS
BOLD=$(tput bold)
RESET=$(tput sgr0)
colorW="[1;37m" # white
colorB="[1;34m" # blue
colorR="[1;31m" # red
colorG="[1;32m" # green
colorY="[1;33m" # yellow
colorM="[1;35m" # magenta

#OUTPUT SHORTCUTS
LEFTB="$BOLD\e$colorB["
RIGHTB="$BOLD\e$colorB]"
MARKER="$BOLD\e$colorG:: "
EXT="${LEFTB}\e${colorG}Extracted${RIGHTB}${RESET}"
DOWNL="${LEFTB}\e${colorG}Downloaded${RIGHTB}${RESET}"
COPIED="${LEFTB}\e${colorG}Copied${RIGHTB}${RESET}"
DFAIL="$LEFTB\e${colorR}DOWNLOAD FAILED$RIGHTB$RESET"
CFAIL="$LEFTB\e${colorR}CLEAN UP FAILED$RIGHTB$RESET"
NFOUND="$LEFTB\e${colorR}NOT FOUND$RIGHTB$RESET"
INSTALLED="${LEFTB}\e${colorW}INSTALLED${RIGHTB}${RESET}"

#WORKING GLOBAL VARIABLES
PKGNAME="" 
PKGVERSION=""
PKGRELEASE=""
declare -a PKGUPGRADES
declare -a selectedUpdates
UPGRADEINDX=0
FORCE=true






#####################
##### FUNCTIONS #####
#####################
cleanExit() {
    rm $BUILDDIR/results.lst
    exit
}

error() {
    echo -e "$MARKER$1 ${RESET}"
    exit
}

checkInstall() {
    pacman -Qq $1 &>/dev/null    
}

searchAUR() {

    touch $BUILDDIR/results.lst

  for term in $@; do
    curl -s "http://aur.archlinux.org/rpc.php?type=search&arg=${term}" | sed 's/{/\n/g' | grep $term >> $BUILDDIR/results.lst
  done

  [ ! -s $BUILDDIR/results.lst ] && exit

  sort $BUILDDIR/results.lst | uniq | while read line; do
    name="$(echo $line | awk -F '"' '{print $8}')"
    vers="$(echo $line | awk -F '"' '{print $12}')"
    desc="$(echo $line | awk -F '"' '{print $20}')"
    flag="$(echo $line | awk -F '"' '{print $44}')"

    echo -e -n "\e${colorM}aur/\e${colorW}$name \e${colorG}$vers\e[0m"
    [ "$flag" = "1" -o "$flag" = "OutOfDate" ] && echo -e -n " \e${colorR}[out of date]\e[0m"

    if checkInstall "$name";
    then
	echo -e -n " $INSTALLED"
    fi

    echo -e "\n    $desc"

  done
  
  cleanExit
}

downloadAUR() {
    cd $BUILDDIR || error "$LEFTB${colorR}Build directory does not exist$RIGHTB"
    
    EDIT=$1
    shift

    for i in "$@"
    do
	wget -q ${AUR}/$i/$i.tar.gz || error "\e$colorW$i $DFAIL$RESET"
        echo -e "$MARKER\e$colorW$i $DOWNL" 

	bsdtar -x -f $i.tar.gz && echo -e "$MARKER\e$colorW$i $EXT"
        rm $i.tar.gz || error "${CFAIL}"
	if $EDIT ; then
	    editPB $i
	    echo -e "$MARKER\e$colorW$i ${LEFTB}\e${colorB}\e${colorG}Edit complete${RIGHTB}"
	fi
    done

}

editPB() {
    if [ -e $1/PKGBUILD ]
    then
	$EDITOR $BUILDDIR/$1/PKGBUILD
    else
	echo -e "\e${colorR}${BOLD}Error: \e${colorW}Could not open PKGBUILD!${RESET}"
    fi
}

copyABS() {
    for i in "$@"
    do
	cp -r `find /var/abs -name "$i"` $BUILDDIR || error "\e$colorW$i $NFOUND"
	echo -e "$MARKER\e$colorW$i $COPIED"
    done
}

makePackages() {

    #Store install flag
    INSTALL=$1
    shift

    for i in "$@"
    do
	if [ -e $BUILDDIR/$i/PKGBUILD ]
	then
	    cd $BUILDDIR/$i
	    if $INSTALL; then
		if $FORCE; then
		    makepkg -fsi
		else
		    makepkg -si
		fi
	    elif $FORCE; then
		makepkg -fs
	    else
		makepkg -s
	    fi
	else
	    echo -e "\e${colorR}${BOLD}Error: \e${colorW}Could not open PKGBUILD!${RESET}"
	fi
    done

}

checkVersion () {   
    TEMP="$(curl -s "http://aur.archlinux.org/rpc.php?type=info&arg=$PKGNAME" | awk -F '"' '{print $18}')"
    AURVERSION="$(echo $TEMP | awk -F "-" '{print $1}')"
    AURRELEASE="$(echo $TEMP | awk -F "-" '{print $2}')"

    if [ "$AURVERSION" \> "$PKGVERSION" ]; then
	UPGRADE="\e${colorG}Update Available"
	echo $PKGNAME >> $BUILDDIR/upgrades.txt
    elif [[ "$AURVERSION" = "$PKGVERSION" && "$AURRELEASE" > "$PKGRELEASE" ]]; then
	UPGRADE="\e${colorG}Update Available"
	echo $PKGNAME >> $BUILDDIR/upgrades.txt
    elif [ "$AURVERSION" == "" ]; then
	UPGRADE="\e${colorY}Not found on AUR"
    else
	UPGRADE="\e${colorB}Up to date"
    fi
	    
    echo -e "$PKGNAME $PKGVERSION-$PKGRELEASE \e${colorW}$AURVERSION-$AURRELEASE $UPGRADE${RESET}"

}


UpgradeAUR() {
    echo -e "Checking AUR for package updates..."
    
    pacman -Qm | sort > $BUILDDIR/localList.txt

    while read line; do
	PKGNAME="$(echo $line | awk -F " " '{print $1}')"
	PKGVERSION="$(echo $line | awk -F " " '{print $2}' | awk -F "-" '{print $1}')"
	PKGRELEASE="$(echo $line | awk -F " " '{print $2}' | awk -F "-" '{print $2}')"
	checkVersion&
    done < $BUILDDIR/localList.txt
    wait
    
    while read line; do
	PKGUPGRADES[UPGRADEINDX]=$line
	((UPGRADEINDX++))
    done < $BUILDDIR/upgrades.txt
    rm $BUILDDIR/upgrades.txt

    
    echo
    for ((i = 0; i<$UPGRADEINDX; i++))
    do
	echo -e -n "\e${colorG}$i${RESET}:\e${colorY}${PKGUPGRADES[$i]} ${RESET}| "
    done

    echo -e "\n\e${colorB}------------------------------------------------------------------${RESET}"

    echo -e "\e${colorW}Do you want to update these packages?"
    echo -e "\e${colorW}Press \e${colorG}Y \e${colorW}to update all, \e${colorG} C\e${colorW} to choose which to update: [Y/n/c]${RESET}"

    while true; do
	read ync
	case $ync in
	    [Yy]* ) 
		FORCE=true
		downloadAUR $1 ${PKGUPGRADES[@]}
		makePackages true ${PKGUPGRADES[@]}
	       	break;;
	    [Nn]* ) break;;
	    [Cc]* )
		FORCE=true
	        echo -n "Enter the number of the corresponding package(s) (separate numbers by space)"	
		read choices
		prepSelectedArray "$choices"
		downloadAUR $1 ${selectedUpdates[@]}
		makePackages true ${selectedUpdates[@]}
		break;
		;;
	    *) 
		FORCE=true
		downloadAUR $1 ${PKGUPGRADES[@]}
		makePackages true ${PKGUPGRADES[@]}
		;;
	esac
    done


    rm $BUILDDIR/localList.txt
}

prepSelectedArray() {
    arrayI=( $1 )
    indx=0
    for i in ${arrayI[@]}; do
	selectedUpdates[indx]=${PKGUPGRADES[$i]}
	((indx++))
    done
}


usage() {
    echo -e "Usage: pbfetch [opiton] [package1] [package2] ....\n"
    echo -e "    options:"
    echo -e "        -d  Download from AUR and extract to build directory"
    echo -e "        -de Download from AUR, extract and edit PKGBUILD"
    echo -e "        -m  Download from AUR, extract, and make the package(s)"
    echo -e "        -me Download from AUR, extract, edit PKGBUILD and make the package(s)"
    echo -e "        -i  Download from AUR, extract, make and install package(s)"
    echo -e "        -ie Download from AUR, extract, edit PKGBUILD, make and install package(s)"
    echo -e "        -s  Search AUR for any package given (Searches name and description)"
    echo -e "        -u  Check AUR for package updates"
    echo -e "        -ue Check AUR for package updates and edit PKGBUILD before install"
    echo -e "        -abs Copy from local abs folder to build directory\n"
    echo -e "        -v  Display version information"
    echo -e "Example: pbfetch -d nvidia-beta nvidia-utils-beta\n"
}

version() {
    echo -e "\n    \e${colorW}$NAME \e${colorG}$VERSION"
    echo -e "    ${RESET}$DESCRIPTION"
    echo -e "    \e${colorW}$AUTHOR \e${colorG}$DATE${RESET}\n"
}


#####################
####### Main ########
#####################

case $1 in
-s)
    shift
    searchAUR $@
    ;;
-abs)
    shift
    copyABS $@
    ;;
-d)
    shift
    downloadAUR false $@
    ;;
-de)
    shift
    downloadAUR true $@
    ;;
-m)
    shift
    downloadAUR false $@
    makePackages $@
    ;;
-me)
    shift
    downloadAUR true $@
    makePackages false $@
    ;;
-i)
    shift
    downloadAUR false $@
    makePackages true $@
    ;;
-ie)
    shift
    downloadAUR true $@
    makePackages true $@
    ;;
-u)
    UpgradeAUR false
    ;;
-ue)
    UpgradeAUR true
    ;;
-ua)
    sudo pacman -Syu
    UpgradeAUR false
    ;;
-v)
    version
    ;;
*)
    usage $1
esac

