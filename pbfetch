#!/bin/bash
######################################################
# Search algorithm heavily influenced by             #
# aurget: http://pbrisbin.com:8080/pages/aurget.html #
######################################################

name="pbfetch"
version="v0.35"
description="Simple script to fetch PKGBUILDS from aur & abs"
author="-Erik Hardesty"
date="(12/13/09)"

######################################################
#################### User Settings ###################
######################################################

#Colorize output
color=true

#PKGBUILD editor
editor="vim"

#BUILD DIRECTORY
buildDir=~/build

#LOCAL abs DIRECTORY
abs="/var/abs"

#aur URL
aur="http://aur.archlinux.org/packages"

######################################################
################## End User Settings #################
######################################################


#COLORS
if $color; then
    bold=$(tput bold)
    reset=$(tput sgr0)
    colorW="\e[1;37m" # white
    colorB="\e[1;34m" # blue
    colorR="\e[1;31m" # red
    colorG="\e[1;32m" # green
    colorY="\e[1;33m" # yellow
    colorM="\e[1;35m" # magenta
else
    bold=''
    reset=''
    colorW=''
    colorB=''
    colorR=''
    colorG=''
    colorY=''
    colorM=''
fi


#OUTPUT SHORTCUTS
leftB="$bold$colorB["
rightB="$bold$colorB]"
marker="$bold$colorG:: "
ext="${leftB}${colorG}Extracted${rightB}${reset}"
downl="${leftB}${colorG}Downloaded${rightB}${reset}"
copied="${leftB}${colorG}Copied${rightB}${reset}"
dFail="$leftB${colorR}downlOAD FAILED$rightB$reset"
cFail="$leftB${colorR}CLEAN UP FAILED$rightB$reset"
nFound="$leftB${colorR}NOT FOUND$rightB$reset"
installed="${leftB}${colorW}installed${rightB}${reset}"

#WORKING GLOBAL VARIABLES
pkgName="" 
pkgVersion=""
pkgRelease=""
declare -a pkgUpgrades
declare -a selectedUpdates
upgradeIndx=0
force=true
edit=false
installPkg=false






#####################
##### FUNCTIONS #####
#####################
cleanExit() {
    rm $buildDir/results.lst
    exit
}

error() {
    echo -e "$marker$1 ${reset}"
    exit
}

checkInstall() {
    pacman -Qq $1 &>/dev/null    
}

SearchAur() {

    touch $buildDir/results.lst

  for term in $@; do
    curl -s "http://aur.archlinux.org/rpc.php?type=search&arg=${term}" | sed 's/{/\n/g' | grep $term >> $buildDir/results.lst
  done

  [ ! -s $buildDir/results.lst ] && exit

  sort $buildDir/results.lst | uniq | while read line; do
    name="$(echo $line | awk -F '"' '{print $8}')"
    vers="$(echo $line | awk -F '"' '{print $12}')"
    desc="$(echo $line | awk -F '"' '{print $20}')"
    flag="$(echo $line | awk -F '"' '{print $44}')"

    echo -e -n "${colorM}aur/${colorW}$name ${colorG}$vers${bold}"
    [ "$flag" = "1" -o "$flag" = "OutOfDate" ] && echo -e -n " ${colorR}[out of date]${bold}"

    if checkInstall "$name";
    then
	echo -e -n " $installed"
    fi

    echo -e "\n    $desc"

  done
  
  cleanExit
}

DownloadAur() {
    cd $buildDir || error "$leftB${colorR}Build directory does not exist$rightB"

    for i in "$@"
    do
	wget -q ${aur}/$i/$i.tar.gz || error "$colorW$i $dFail$reset"
        echo -e "$marker$colorW$i $downl" 

	bsdtar -x -f $i.tar.gz && echo -e "$marker$colorW$i $ext"
        rm $i.tar.gz || error "${cFail}"
	if $edit ; then
	    editPB $i
	    echo -e "$marker$colorW$i ${leftB}${colorB}${colorG}Edit complete${rightB}"
	fi
    done

}

editPB() {
    if [ -e $1/PKGBUILD ]
    then
	$editor $buildDir/$1/PKGBUILD
    else
	echo -e "${colorR}${bold}Error: ${colorW}Could not open PKGBUILD!${reset}"
    fi
}

CopyAbs() {
    for i in "$@"
    do
	cp -r `find /var/abs -name "$i"` $buildDir || error "$colorW$i $nFound"
	echo -e "$marker$colorW$i $copied"
    done
}

MakePackages() {

    for i in "$@"
    do
	if [ -e $buildDir/$i/PKGBUILD ]
	then
	    cd $buildDir/$i
	    if $installPkg; then
		if $force; then
		    makepkg -fsi
		else
		    makepkg -si
		fi
	    elif $force; then
		makepkg -fs
	    else
		makepkg -s
	    fi
	else
	    echo -e "${colorR}${bold}Error: ${colorW}Could not open PKGBUILD!${reset}"
	fi
    done

}

checkVersion () {   
    TEMP="$(curl -s "http://aur.archlinux.org/rpc.php?type=info&arg=$pkgName" | awk -F '"' '{print $18}')"
    aurversion="$(echo $TEMP | awk -F "-" '{print $1}')"
    aurRELEASE="$(echo $TEMP | awk -F "-" '{print $2}')"

    if [ "$aurversion" \> "$pkgVersion" ]; then
	UPGRADE="${colorG}Update Available"
	echo $pkgName >> $buildDir/upgrades.txt
    elif [[ "$aurversion" = "$pkgVersion" && "$aurRELEASE" > "$pkgRelease" ]]; then
	UPGRADE="${colorG}Update Available"
	echo $pkgName >> $buildDir/upgrades.txt
    elif [ "$aurversion" == "" ]; then
	UPGRADE="${colorY}Not found on aur"
    else
	UPGRADE="${colorB}Up to date"
    fi
	    
    echo -e "$pkgName $pkgVersion-$pkgRelease ${colorW}$aurversion-$aurRELEASE $UPGRADE${reset}"

}


UpgradeAur() {
    echo -e "Checking aur for package updates..."
    
    pacman -Qm | sort > $buildDir/localList.txt

    while read line; do
	pkgName="$(echo $line | awk -F " " '{print $1}')"
	pkgVersion="$(echo $line | awk -F " " '{print $2}' | awk -F "-" '{print $1}')"
	pkgRelease="$(echo $line | awk -F " " '{print $2}' | awk -F "-" '{print $2}')"
	checkVersion&
    done < $buildDir/localList.txt
    wait
    
    while read line; do
	pkgUpgrades[upgradeIndx]=$line
	((upgradeIndx++))
    done < $buildDir/upgrades.txt
    rm $buildDir/upgrades.txt

    
    echo
    for ((i = 0; i<$upgradeIndx; i++))
    do
	echo -e -n "${colorG}$i${reset}:${colorY}${pkgUpgrades[$i]} ${reset}| "
    done

    echo -e "\n${colorB}------------------------------------------------------------------${reset}"

    echo -e "${colorW}Do you want to update these packages?"
    echo -e "${colorW}Press ${colorG}Y ${colorW}to update all, ${colorG} C${colorW} to choose which to update: [Y/n/c]${reset}"

    while true; do
	read ync
	case $ync in
	    [Yy]* ) 
		force=true
		DownloadAur ${pkgUpgrades[@]}
		MakePackages ${pkgUpgrades[@]}
	       	break;;
	    [Nn]* ) break;;
	    [Cc]* )
		force=true
	        echo -n "Enter the number of the corresponding package(s) (separate numbers by space)"	
		read choices
		prepSelectedArray "$choices"
		DownloadAur ${selectedUpdates[@]}
		MakePackages ${selectedUpdates[@]}
		break;
		;;
	    *) 
		force=true
		DownloadAur ${pkgUpgrades[@]}
		MakePackages ${pkgUpgrades[@]}
		;;
	esac
    done


    rm $buildDir/localList.txt
}

prepSelectedArray() {
    arrayI=( $1 )
    indx=0
    for i in ${arrayI[@]}; do
	selectedUpdates[indx]=${pkgUpgrades[$i]}
	((indx++))
    done
}


Usage() {
    echo -e "Usage: pbfetch [opiton] [package1] [package2] ....\n"
    echo -e "    options:"
    echo -e "        -d  Download from aur and extract to build directory"
    echo -e "        -de Download from aur, extract and edit PKGBUILD"
    echo -e "        -m  Download from aur, extract, and make the package(s)"
    echo -e "        -me Download from aur, extract, edit PKGBUILD and make the package(s)"
    echo -e "        -i  Download from aur, extract, make and install package(s)"
    echo -e "        -ie Download from aur, extract, edit PKGBUILD, make and install package(s)"
    echo -e "        -s  Search aur for any package given (Searches name and description)"
    echo -e "        -u  Check aur for package updates"
    echo -e "        -ue Check aur for package updates and edit PKGBUILD before install"
    echo -e "        -abs Copy from local abs folder to build directory\n"
    echo -e "        -v  Display version information"
    echo -e "Example: pbfetch -d nvidia-beta nvidia-utils-beta\n"
}

version() {
    echo -e "\n    ${colorW}$name ${colorG}$version"
    echo -e "    ${reset}$description"
    echo -e "    ${colorW}$author ${colorG}$date${reset}\n"
}


#####################
####### Main ########
#####################

case $1 in
-s)
    shift
    pacman-color -Ss $@
    SearchAur $@
    ;;
-abs)
    shift
    CopyAbs $@
    ;;
-d)
    shift
    DownloadAur $@
    ;;
-de)
    shift
    edit=true
    DownloadAur $@
    ;;
-m)
    shift
    DownloadAur $@
    MakePackages $@
    ;;
-me)
    shift
    edit=true
    DownloadAur $@
    MakePackages $@
    ;;
-i)
    shift
    installPkg=true
    DownloadAur $@
    MakePackages $@
    ;;
-ie)
    shift
    installPkg=true
    edit=true
    DownloadAur $@
    MakePackages $@
    ;;
-u)
    installPkg=true
    UpgradeAur
    ;;
-ue)
    edit=true
    installPkg=true
    UpgradeAur
    ;;
-ua)
    installPkg=true
    sudo pacman -Syu
    UpgradeAur
    ;;
-v)
    version
    ;;
*)
    Usage $1
esac

