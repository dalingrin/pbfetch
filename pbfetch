#!/bin/bash
######################################################
# Search algorithm heavily influenced by             #
# aurget: http://pbrisbin.com:8080/pages/aurget.html #
######################################################

name="pbfetch"
version="v0.5"
description="Simple script to fetch PKGBUILDS from aur & abs"
author="-Erik Hardesty"
date="(12/22/09)"

######################################################
################# Begin User Settings ################
######################################################

#####################################
#### Pacman sync fallback to AUR ####
#####################################
fallback=true

#########################
#### Colorize output ####
#########################
color=true
#color=false

#######################
#### Pacman binary ####
#######################
#pacman="pacman"
pacman="pacman-color"

#########################
#### PKGBUILD editor ####
#########################
editor="vim"
#editor="gvim"

#########################
#### BUILD DIRECTORY ####
#########################
buildDir=~/build

#############################
#### LOCAL abs DIRECTORY ####
#############################
abs="/var/abs"

#################
#### aur URL ####
#################
aur="http://aur.archlinux.org/packages"

######################################################
################## End User Settings #################
######################################################

################
#### COLORS ####
################
if $color; then
    bold=$(tput bold)
    reset=$(tput sgr0)
    colorW="\e[1;37m" # white
    colorB="\e[1;34m" # blue
    colorR="\e[1;31m" # red
    colorG="\e[1;32m" # green
    colorY="\e[1;33m" # yellow
    colorM="\e[1;35m" # magenta
else
    bold=''
    reset=''
    colorW=''
    colorB=''
    colorR=''
    colorG=''
    colorY=''
    colorM=''
fi

##########################
#### OUTPUT SHORTCUTS ####
##########################
leftB="$bold$colorB["
rightB="$bold$colorB]"
bMarker="$bold$colorG==> $reset"
lMarker="  $colorB-> "
ext="${leftB}${colorG}Extracted${rightB}${reset}"
downl="${leftB}${colorG}Downloaded${rightB}${reset}"
copied="${leftB}${colorG}Copied${rightB}${reset}"
dFail="$leftB${colorR}downlOAD FAILED$rightB$reset"
cFail="$leftB${colorR}CLEAN UP FAILED$rightB$reset"
nFound="$leftB${colorR}NOT FOUND$rightB$reset"
installed="${leftB}${colorW}installed${rightB}${reset}"

##################################
#### WORKING GLOBAL VARIABLES ####
##################################
pkgName="" 
pkgVersion=""
pkgRelease=""
declare -a pkgUpgrades
declare -a selectedUpdates
upgradeIndx=0
force=true
edit=false
installPkg=false


#############################
##### PRIMARY FUNCTIONS #####
#############################

SearchAur() {

  for term in $@; do
    curl -s "http://aur.archlinux.org/rpc.php?type=search&arg=${term}" \
	| sed 's/{/\n/g' | grep $term >> $buildDir/results.lst
  done

  [ ! -s $buildDir/results.lst ] && exit

  sort $buildDir/results.lst | uniq | while read line; do
    name="$(echo $line | awk -F '"' '{print $8}')"
    vers="$(echo $line | awk -F '"' '{print $12}')"
    desc="$(echo $line | awk -F '"' '{print $20}')"
    flag="$(echo $line | awk -F '"' '{print $44}')"

    echo -e -n "${colorM}aur/${colorW}$name ${colorG}$vers${bold}$reset"
    [ "$flag" = "1" -o "$flag" = "OutOfDate" ] && echo -e -n " ${colorR}[out of date]${bold}${reset}"
    if checkInstall "$name";
    then
	echo -e -n " $installed"
    fi

    echo -e "\n    $desc"
  done
  
  rm $buildDir/results.lst
  exit
}

DownloadAur() {
  cd $buildDir || error "$leftB${colorR}Build directory does not exist$rightB"

  for i in "$@"
  do
    wget -q ${aur}/$i/$i.tar.gz || error "$colorW$i $dFail$reset"
    echo -e "$bMarker$colorW$i $downl" 

    bsdtar -x -f $i.tar.gz && echo -e "$bMarker$colorW$i $ext"
    rm $i.tar.gz || error "${cFail}"
    if $edit ; then
      editPB $i
      echo -e "$lMarker$colorW$i ${leftB}${colorB}${colorG}Edit complete${rightB}"
    fi
  done

}

editPB() {
  if [ -e $1/PKGBUILD ]; then
    $editor $buildDir/$1/PKGBUILD
  else
    echo -e "${colorR}${bold}Error: ${colorW}Could not open PKGBUILD!${reset}"
  fi
}

CopyAbs() {
  for i in "$@"
  do
    cp -r `find /var/abs -name "$i"` $buildDir || error "$colorW$i $nFound"
    echo -e "$bMarker$colorW$i $copied"
  done
}

MakePackages() {
  for i in "$@"
  do
    if [ -e $buildDir/$i/PKGBUILD ]; then
      cd $buildDir/$i
      if $installPkg; then
	      if $force; then
          CheckDepends
	        makepkg -fi
	      else
          CheckDepends
	        makepkg -i
	      fi
      elif $force; then
        CheckDepends
	      makepkg -f
      else
        CheckDepends
	      makepkg 
      fi
    else
      echo -e "${colorR}${bold}Error: ${colorW}Could not open PKGBUILD!${reset}"
    fi
  done
}

CheckDepends() {
  echo -e "\nChecking package dependencies..."
  
  #Set architecture variables
  source /etc/makepkg.conf
  source /etc/abs.conf

  #Remove everything from build() to end of file for sourcing
  cat PKGBUILD | sed '/build()/,$ d' > PKGBUILD.source
  source PKGBUILD.source &> /dev/null
  rm PKGBUILD.source
  
  dependsNeeded=$(sudo $pacman -T ${depends[@]})
  #if pacman returns nothing then all dependencies
  #already installed, no need to continue
  if [[ $dependsNeeded == "" ]]; then
    return
  fi

  depsFromRepo=()
  depsFromAUR=()
  availFromRepo=$(pacman -Sql)

  
  #check if dependency is available from repositories
  #save in array if so
  count=-1
  countAUR=0
  for dep in ${dependsNeeded[@]}; do
    ((count++))
    for pkg in ${availFromRepo[@]}; do
      if [[ $pkg == $dep ]]; then
        depsFromRepo[$count]=$dep
      fi
    done
    if [[ ${depsFromRepo[$count]} != $dep ]]; then
      depsFromAUR[$countAUR]=$dep
      ((countAUR++))
    fi
  done

  if [[ ${#depsFromAUR[*]} -gt 0 ]]; then
    echo -e "Installing dependencies from AUR..."
    DownloadAur ${depsFromAUR[@]} || error "Dependency not found! Exiting..."
    MakePackages ${depsFromAUR[@]} || exit
  fi

  sudo $pacman -S --needed ${depsFromRepo[@]}

}

checkVersion () {   
  TEMP="$(curl -s "http://aur.archlinux.org/rpc.php?type=info&arg=$pkgName" \
	| awk -F '"' '{print $18}')"
  aurversion="$(echo $TEMP | awk -F "-" '{print $1}')"
  aurRELEASE="$(echo $TEMP | awk -F "-" '{print $2}')"


  if [ "$aurversion" \> "$pkgVersion" ]; then
    UPGRADE="${colorG}Update Available"
    echo $pkgName >> $buildDir/upgrades.txt
  elif [[ "$aurversion" = "$pkgVersion" && "$aurRELEASE" > "$pkgRelease" ]]; then
    UPGRADE="${colorG}Update Available"
    echo $pkgName >> $buildDir/upgrades.txt
  elif [ "$aurversion" == "" ]; then
    UPGRADE="${colorY}Not found on aur"
  else
    UPGRADE="${colorB}Up to date"
  fi
	    
  echo -e "$pkgName $pkgVersion-$pkgRelease ${colorW}$aurversion-$aurRELEASE $UPGRADE${reset}"
}

UpgradeAur() {
  echo -e "Checking aur for package updates..."
    
  $pacman -Qm | sort > $buildDir/localList.txt

  while read line; do
    pkgName="$(echo $line | awk -F " " '{print $1}')"
    pkgVersion="$(echo $line | awk -F " " '{print $2}' | awk -F "-" '{print $1}')"
    pkgRelease="$(echo $line | awk -F " " '{print $2}' | awk -F "-" '{print $2}')"
    checkVersion&
  done < $buildDir/localList.txt
  wait
    
  while read line; do
    pkgUpgrades[upgradeIndx]=$line
    ((upgradeIndx++))
  done < $buildDir/upgrades.txt
  rm $buildDir/upgrades.txt

    
  echo
  for ((i = 0; i<$upgradeIndx; i++)); do
    echo -e -n "${colorG}$i${reset}:${colorY}${pkgUpgrades[$i]} ${reset}| "
  done

  echo -e "\n${colorB}------------------------------------------------------------------${reset}"
  echo -e "${colorW}Do you want to update these packages?"
  echo -e "${colorW}Press ${colorG}Y ${colorW}to update all, ${colorG} C${colorW} to choose which to update: [Y/n/c]${reset}"

  while true; do
    read ync
    case $ync in
      [Yy]* ) 
    	force=true
	DownloadAur ${pkgUpgrades[@]}
	MakePackages ${pkgUpgrades[@]}
       	break;;
      [Nn]* ) break;;
      [Cc]* )
	force=true
        echo -n "Enter the number of the corresponding package(s) (separate numbers by space)"	
	read choices
	prepSelectedArray "$choices"
	DownloadAur ${selectedUpdates[@]}
	MakePackages ${selectedUpdates[@]}
	break;
	;;
      *) 
	force=true
	DownloadAur ${pkgUpgrades[@]}
	MakePackages ${pkgUpgrades[@]}
	;;
    esac
  done

  rm $buildDir/localList.txt
}

Usage() {
  echo -e "Usage: pbfetch [opiton] [package1] [package2] ....\n"
  echo -e "  options:"
  echo -e "    -d  Download from aur and extract to build directory"
  echo -e "    -de Download from aur, extract and edit PKGBUILD"
  echo -e "    -m  Download from aur, extract, and make the package(s)"
  echo -e "    -me Download from aur, extract, edit PKGBUILD and make the package(s)"
  echo -e "    -i  Download from aur, extract, make and install package(s)"
  echo -e "    -ie Download from aur, extract, edit PKGBUILD, make and install package(s)"
  echo -e "    -s  Search aur for any package given (Searches name and description)"
  echo -e "    -sa Search repo and aur for any package given"
  echo -e "    -u  Check aur for package updates"
  echo -e "    -ue Check aur for package updates and edit PKGBUILD before install"
  echo -e "    -ua Check aur and official repos for updates"
  echo -e "    -abs Copy from local abs folder to build directory"
  echo -e "    -v  Display version information\n"
  echo -e "Example: pbfetch -d nvidia-beta nvidia-utils-beta\n\n"
  echo -e "  pbfetch will also pass any pacman related options to the "
  echo -e "  pacman binary specifed in the script, eg. pbfetch -Qs\n"
}

version() {
  echo -e "\n    ${colorW}$name ${colorG}$version"
  echo -e "    ${reset}$description"
  echo -e "    ${colorW}$author ${colorG}$date${reset}\n"
}

###########################
#### UTILITY FUNCTIONS ####
###########################
prepSelectedArray() {
  arrayI=( $1 )
  indx=0
  for i in ${arrayI[@]}; do
    selectedUpdates[indx]=${pkgUpgrades[$i]}
    ((indx++))
  done
}

checkInstall() {
  $pacman -Qq $1 &>/dev/null    
}

error() {
  echo -e "$bMarker$1 ${reset}"
  exit
}

#####################
####### Main ########
#####################

case $1 in
-sa)
  shift  
  $pacman -Ss $@
  SearchAur $@
  ;;
-s)
  shift
  SearchAur $@
  ;;
-abs)
  shift
  CopyAbs $@
  ;;
-d)
  shift
  DownloadAur $@
  ;;
-de)
  shift
  edit=true
  DownloadAur $@
  ;;
-m)
  shift
  DownloadAur $@
  MakePackages $@
  ;;
-me)
  shift
  edit=true
  DownloadAur $@
  MakePackages $@
  ;;
-i)
  shift
  installPkg=true
  DownloadAur $@
  MakePackages $@
  ;;
-ie)
  shift
  installPkg=true
  edit=true
  DownloadAur $@
  MakePackages $@
  ;;
-u)
  installPkg=true
  UpgradeAur
  ;;
-ue)
  edit=true
  installPkg=true
  UpgradeAur
  ;;
-ua)
  installPkg=true
  sudo $pacman -Syu
  UpgradeAur
  ;;
-S)
  if $fallback; then
    shift
    sudo $pacman -S $@ && exit || echo -e "Attempting install from AUR..."
    installPkg=true
    DownloadAur $@
    MakePackages $@
  else
    sudo $pacman $@
  fi
  ;;
-v)
  version
  ;;
-S*)
  sudo $pacman $@
  ;;
-R*)
  sudo $pacman $@
  ;;
-Q*)
  $pacman $@
  ;;
-T*)
  sudo $pacman $@
  ;;
-U*)
  sudo $pacman $@
  ;;
-V*)
  pacman $@
  ;;
-h)
  $pacman $@
  ;;
--*)
  sudo $pacman $@
  ;;
*)
  Usage $1
esac

# vim:set ts=2 sw=2 et:
